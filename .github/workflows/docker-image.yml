name: Build and Deploy to AWS ECR

on:
  push:
    branches: [ jellybean ]
  pull_request:
    branches: [ jellybean ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to deploy (e.g., 1.0, 2.0)'
        required: true
        default: 'latest'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set version tag
      id: version
      run: |
        if [[ "${{ github.event.inputs.version }}" != "" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=latest" >> $GITHUB_ENV
        fi
        
    - name: Create appsettings.json
      run: |
        cat > appsettings.json << EOF
        {
          "ConnectionStrings": {
            "DefaultConnection": "Server=${{ secrets.DB_SERVER }};Database=${{ secrets.DB_NAME }};User=${{ secrets.DB_USER }};Password=${{ secrets.DB_PASSWORD }};"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "AllowedHosts": "*"
        }
        EOF
        
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }}
        
        # Also update latest tag if we're on main branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        fi
        
    - name: Update SSM Parameter with image version
      run: |
        aws ssm put-parameter \
          --name "/${{ secrets.PROJECT_NAME }}/app/image-version" \
          --value "${{ env.VERSION }}" \
          --type "String" \
          --overwrite