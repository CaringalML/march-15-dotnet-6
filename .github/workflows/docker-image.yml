name: Build and Deploy to AWS ECR

on:
  push:
    branches: [ jellybean ]
  pull_request:
    branches: [ jellybean ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1  # Singapore Region
      
    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 939737198590.dkr.ecr.ap-southeast-1.amazonaws.com

    - name: Create appsettings.json
      run: |
        cat > appsettings.json << EOF
        {
          "ConnectionStrings": {
            "DefaultConnection": "Server=${{ secrets.DB_SERVER }};Database=${{ secrets.DB_NAME }};User=${{ secrets.DB_USER }};Password=${{ secrets.DB_PASSWORD }};"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "AllowedHosts": "*"
        }
        EOF

    - name: Set Image Version
      id: set-version
      run: |
        # Use a simple version number
        VERSION="8.0"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "::set-output name=version::$VERSION"

    - name: Build and push Docker image to ECR
      run: |
        echo "Building Docker image with version tag: ${{ env.VERSION }}"
        docker build -t my-api .
        docker tag my-api 939737198590.dkr.ecr.ap-southeast-1.amazonaws.com/my-api:${{ env.VERSION }}
        docker push 939737198590.dkr.ecr.ap-southeast-1.amazonaws.com/my-api:${{ env.VERSION }}
        
        echo "Verifying image was pushed to ECR"
        aws ecr describe-images --repository-name my-api --image-ids imageTag=${{ env.VERSION }} || echo "WARNING: Image verification failed"

    - name: Update SSM Parameter
      run: |
        aws ssm put-parameter \
          --name "/artisan-tiling/app/image-version" \
          --value "${{ env.VERSION }}" \
          --type "String" \
          --overwrite

    - name: Get Current Launch Template
      id: get-launch-template
      run: |
        # Try finding by name prefix first
        LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
          --filters "Name=launch-template-name,Values=artisan-tiling-launch-template-*" \
          --query "LaunchTemplates[0].LaunchTemplateId" \
          --output text)
        
        # If not found, try looking for any launch template used by the ASG
        if [ "$LAUNCH_TEMPLATE_ID" == "None" ] || [ -z "$LAUNCH_TEMPLATE_ID" ]; then
          echo "Searching for launch template via ASG..."
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --filters "Name=tag:Name,Values=artisan-tiling-app-asg" \
            --query "AutoScalingGroups[0].AutoScalingGroupName" \
            --output text)
            
          if [ "$ASG_NAME" != "None" ] && [ ! -z "$ASG_NAME" ]; then
            LAUNCH_TEMPLATE_ID=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names "$ASG_NAME" \
              --query "AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId" \
              --output text)
          fi
        fi
        
        if [ "$LAUNCH_TEMPLATE_ID" == "None" ] || [ -z "$LAUNCH_TEMPLATE_ID" ]; then
          echo "No launch template found. Exiting."
          exit 1
        fi
        
        echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV
        echo "::set-output name=launch_template_id::$LAUNCH_TEMPLATE_ID"
        
        # Get the latest version of the launch template
        LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --query "LaunchTemplateVersions[0].VersionNumber" \
          --output text)
          
        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Get Current User Data
      id: get-user-data
      run: |
        # Get the user data from the current launch template
        USER_DATA=$(aws ec2 describe-launch-template-versions \
          --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID }} \
          --versions ${{ env.LATEST_VERSION }} \
          --query "LaunchTemplateVersions[0].LaunchTemplateData.UserData" \
          --output text)
        
        # Save it to a file (it will be base64 encoded)
        echo $USER_DATA | base64 --decode > user_data.sh

    - name: Update User Data
      id: update-user-data
      run: |
        # Update image version in user data
        sed -i "s|docker pull \$ECR_REPO:[0-9\\.]*|docker pull \$ECR_REPO:${{ env.VERSION }}|g" user_data.sh
        sed -i "s|docker run -d -p 80:80.*\$ECR_REPO:[0-9\\.]*|docker run -d -p 80:80 --name my-api \$ECR_REPO:${{ env.VERSION }}|g" user_data.sh
        
        # Update health check script
        sed -i "/HEALTHSCRIPT/,/HEALTHSCRIPT/ s|docker pull \$ECR_REPO:[0-9\\.]*|docker pull \$ECR_REPO:${{ env.VERSION }}|g" user_data.sh
        sed -i "/HEALTHSCRIPT/,/HEALTHSCRIPT/ s|docker run -d -p 80:80.*\$ECR_REPO:[0-9\\.]*|docker run -d -p 80:80 --name my-api \$ECR_REPO:${{ env.VERSION }}|g" user_data.sh
        
        # Base64 encode the updated user data
        UPDATED_USER_DATA=$(base64 -w 0 user_data.sh)
        echo "UPDATED_USER_DATA=$UPDATED_USER_DATA" >> $GITHUB_ENV

    - name: Create New Launch Template Version
      run: |
        aws ec2 create-launch-template-version \
          --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID }} \
          --version-description "Updated with image version ${{ env.VERSION }}" \
          --source-version ${{ env.LATEST_VERSION }} \
          --launch-template-data "{\"UserData\":\"${{ env.UPDATED_USER_DATA }}\"}"
          
    - name: Update Auto Scaling Group
      run: |
        # Get the ASG name
        ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
          --filters "Name=tag:Name,Values=artisan-tiling-app-asg" \
          --query "AutoScalingGroups[0].AutoScalingGroupName" \
          --output text)
          
        if [ "$ASG_NAME" == "None" ] || [ -z "$ASG_NAME" ]; then
          echo "No Auto Scaling Group found. Exiting."
          exit 1
        fi
        
        # Update the ASG to use the newest launch template version
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $ASG_NAME \
          --launch-template "{\"LaunchTemplateId\":\"${{ env.LAUNCH_TEMPLATE_ID }}\",\"Version\":\"\$Latest\"}"

    - name: Force New Instance Refresh
      run: |
        # Get the ASG name if not already set
        if [ -z "$ASG_NAME" ]; then
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --filters "Name=tag:Name,Values=artisan-tiling-app-asg" \
            --query "AutoScalingGroups[0].AutoScalingGroupName" \
            --output text)
        fi
        
        # Check if there's an instance refresh already in progress
        INSTANCE_REFRESH_ID=$(aws autoscaling describe-instance-refreshes \
          --auto-scaling-group-name $ASG_NAME \
          --query "InstanceRefreshes[?Status=='InProgress'].InstanceRefreshId" \
          --output text)
        
        # Cancel any existing instance refresh
        if [ -n "$INSTANCE_REFRESH_ID" ]; then
          echo "Canceling existing instance refresh with ID: $INSTANCE_REFRESH_ID"
          aws autoscaling cancel-instance-refresh \
            --auto-scaling-group-name $ASG_NAME
          
          # Wait for the cancellation to complete
          echo "Waiting for instance refresh cancellation to complete..."
          sleep 15
        fi
        
        echo "Starting a new instance refresh..."
        # Start a new instance refresh
        aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME \
          --preferences "{\"MinHealthyPercentage\":90,\"InstanceWarmup\":300}"