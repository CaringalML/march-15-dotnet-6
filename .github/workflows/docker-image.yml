name: Build and Deploy to AWS ECR

on:
  push:
    branches: [ jellybean ]
  pull_request:
    branches: [ jellybean ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
      
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 939737198590.dkr.ecr.ap-southeast-1.amazonaws.com

    - name: Create appsettings.json
      run: |
        cat > appsettings.json << EOF
        {
          "ConnectionStrings": {
            "DefaultConnection": "Server=${{ secrets.DB_SERVER }};Database=${{ secrets.DB_NAME }};User=${{ secrets.DB_USER }};Password=${{ secrets.DB_PASSWORD }};"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "AllowedHosts": "*"
        }
        EOF

    - name: Set Image Version
      run: |
        VERSION="9.0"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build and push Docker image to ECR
      run: |
        echo "Building Docker image with version tag: $VERSION"
        docker build -t my-api .
        docker tag my-api 939737198590.dkr.ecr.ap-southeast-1.amazonaws.com/my-api:$VERSION
        docker push 939737198590.dkr.ecr.ap-southeast-1.amazonaws.com/my-api:$VERSION

        echo "Verifying image was pushed to ECR"
        aws ecr describe-images --repository-name my-api --image-ids imageTag=$VERSION || exit 1

    - name: Update SSM Parameter
      run: |
        aws ssm put-parameter \
          --name "/artisan-tiling/app/image-version" \
          --value "$VERSION" \
          --type "String" \
          --overwrite

    - name: Get Current Launch Template
      id: get-launch-template
      run: |
        LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
          --filters "Name=launch-template-name,Values=artisan-tiling-launch-template-*" \
          --query "LaunchTemplates[0].LaunchTemplateId" \
          --output text)
        
        if [ "$LAUNCH_TEMPLATE_ID" == "None" ] || [ -z "$LAUNCH_TEMPLATE_ID" ]; then
          echo "No launch template found. Exiting."
          exit 1
        fi
        
        echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV
        
        LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --query "LaunchTemplateVersions[0].VersionNumber" \
          --output text)

        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

    - name: Get and Update User Data
      run: |
        USER_DATA=$(aws ec2 describe-launch-template-versions \
          --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID }} \
          --versions ${{ env.LATEST_VERSION }} \
          --query "LaunchTemplateVersions[0].LaunchTemplateData.UserData" \
          --output text | base64 --decode)

        echo "$USER_DATA" > user_data.sh

        sed -i "s|docker pull .*/my-api:[0-9\\.]*|docker pull 939737198590.dkr.ecr.ap-southeast-1.amazonaws.com/my-api:$VERSION|g" user_data.sh
        sed -i "s|docker run -d -p 80:80.*my-api.*|docker run -d -p 80:80 --name my-api 939737198590.dkr.ecr.ap-southeast-1.amazonaws.com/my-api:$VERSION|g" user_data.sh
        
        echo "Updated User Data:"
        cat user_data.sh
